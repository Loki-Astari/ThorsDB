
#include <gtest/gtest.h>
#include "Op_ReplyHandShake.h"

using namespace ThorsAnvil::DB::Mongo;
using std::string_literals::operator""s;

TEST(Op_ReplyHandshakeTest, HandShakeError)
{
    std::string input = "\xc0\x00\x00\x00\x47\x13\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00"
                        "\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                        "\x01\x00\x00\x00\x9c\x00\x00\x00\x01\x6f\x6b\x00\x00\x00\x00\x00"
                        "\x00\x00\x00\x00\x02\x65\x72\x72\x6d\x73\x67\x00\x5a\x00\x00\x00"
                        "\x54\x68\x65\x20\x27\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e"
                        "\x27\x20\x66\x69\x65\x6c\x64\x20\x69\x73\x20\x72\x65\x71\x75\x69"
                        "\x72\x65\x64\x20\x74\x6f\x20\x62\x65\x20\x61\x20\x42\x53\x4f\x4e"
                        "\x20\x64\x6f\x63\x75\x6d\x65\x6e\x74\x20\x69\x6e\x20\x74\x68\x65"
                        "\x20\x63\x6c\x69\x65\x6e\x74\x20\x6d\x65\x74\x61\x64\x61\x74\x61"
                        "\x20\x64\x6f\x63\x75\x6d\x65\x6e\x74\x00\x10\x63\x6f\x64\x65\x00"
                        "\x0e\x00\x00\x00\x02\x63\x6f\x64\x65\x4e\x61\x6d\x65\x00\x0d\x00"
                        "\x00\x00\x54\x79\x70\x65\x4d\x69\x73\x6d\x61\x74\x63\x68\x00\x00"s;

    std::stringstream   inputStream(input);

    Op_ReplyHandShake   handShake;
    inputStream >> handShake;

    EXPECT_EQ(handShake.getDocument(0).OK,      0.0);
    EXPECT_EQ(handShake.getDocument(0).code,    14);
    EXPECT_EQ(handShake.getDocument(0).errmsg,  "The 'application' field is required to be a BSON document in the client metadata document");
    EXPECT_EQ(handShake.getDocument(0).codeName,"TypeMismatch");
}

TEST(Op_ReplyHandshakeTest, HandShakeErrorHumanReadable)
{
    std::string input = "\xc0\x00\x00\x00\x47\x13\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00"
                        "\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
                        "\x01\x00\x00\x00\x9c\x00\x00\x00\x01\x6f\x6b\x00\x00\x00\x00\x00"
                        "\x00\x00\x00\x00\x02\x65\x72\x72\x6d\x73\x67\x00\x5a\x00\x00\x00"
                        "\x54\x68\x65\x20\x27\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e"
                        "\x27\x20\x66\x69\x65\x6c\x64\x20\x69\x73\x20\x72\x65\x71\x75\x69"
                        "\x72\x65\x64\x20\x74\x6f\x20\x62\x65\x20\x61\x20\x42\x53\x4f\x4e"
                        "\x20\x64\x6f\x63\x75\x6d\x65\x6e\x74\x20\x69\x6e\x20\x74\x68\x65"
                        "\x20\x63\x6c\x69\x65\x6e\x74\x20\x6d\x65\x74\x61\x64\x61\x74\x61"
                        "\x20\x64\x6f\x63\x75\x6d\x65\x6e\x74\x00\x10\x63\x6f\x64\x65\x00"
                        "\x0e\x00\x00\x00\x02\x63\x6f\x64\x65\x4e\x61\x6d\x65\x00\x0d\x00"
                        "\x00\x00\x54\x79\x70\x65\x4d\x69\x73\x6d\x61\x74\x63\x68\x00\x00"s;

    std::stringstream   inputStream(input);

    Op_ReplyHandShake   handShake;
    inputStream >> handShake;

    std::stringstream   outputStream;
    outputStream << make_hr(handShake);
}

